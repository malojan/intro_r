# Reshaping data

The analysis of your data is usually not the part of your project that takes longer : it is data wrangling. Your data have to be cleaned in order to be analyzed. This mean that you have a *tidy* datasets. Here we focus how we can combine and reshape different datasets in order to use them properly.

Here, I am interested in the polling of different political parties.

```{r warning=FALSE, message=FALSE}
library(tidyverse)
library(jsonlite) # To handle json data

german_polls <-
  jsonlite::fromJSON("https://www.politico.eu/wp-json/politico/v1/poll-of-polls/DE-parliament") |> 
  pluck("polls") |>
  unnest()

german_polls
```

I want this to be in a country-year format

## Reshaping with `pivot_longer()` and `pivot_wider()`

```{r}
(german_long <- german_polls |>
  pivot_longer(
    # Select which columns to pivot
    cols = c(Union, FDP, LINKE, SPD, PIRATEN, AfD, GRUENE),
    # Choose a name for the new column with all of the parties
    names_to = "party",
    # Choose a name for the new column with the vote intentions
    values_to = "intention"
  ))

german_long |> 
  summarise(intention = mean(intention, na.rm = T), .by = c(date, party)) |> 
  mutate(rank = row_number(-intention), .by = date) |>
  filter(rank == 1) |> 
  count(rank, party, sort = T)

```

```{r warning=FALSE, message=FALSE}
(german_wide <- german_long |> 
  pivot_wider(
    names_from = party,
    values_from = intention
  ) |> 
  unnest())

german_wide |> 
  mutate(left = GRUENE > SPD) |> 
  count(left)
```

# Combining with bind_rows

```{r warning= FALSE}
swedish_polls <-
  jsonlite::fromJSON("https://www.politico.eu/wp-json/politico/v1/poll-of-polls/ES-parliament") |> 
  pluck("polls") |>
  unnest()

glimpse(swedish_polls)

(swedish_long <- swedish_polls |>
  pivot_longer(
    # Select which columns NOT to pivot
    cols = -c(date, firm, date_from, sample_size),
    # Choose a name for the new column with all of the parties
    names_to = "party",
    # Choose a name for the new column with the vote intentions
    values_to = "intention"
  ))

swedish_long <- swedish_long |> mutate(country = "Sweden")
german_long <- german_long |> mutate(country = "Germany")

polls <- bind_rows(swedish_long, german_long)
```

```{r}
polls |>
  mutate(year = str_sub(date, 1, 4),
         fragm = if_else(year > 2015, TRUE, FALSE)) |>
  summarise(intention_mean = mean(intention, na.rm = TRUE),
            .by = c(country, fragm))
```


# Test with executive approval


## Get executive approval

```{r}
pr_approval <- read_csv("https://raw.githubusercontent.com/malojan/executive_approval/main/data/president_approval_kantar.csv")

pr_approval |> 
  select(quarter)
```

```{r}
gdp_fr <- read_tsv("session2/data/eurostat_gdp.tsv")

head(gdp_fr)
```

```{r}
gdp_clean <- gdp_fr |> 
  janitor::clean_names() |> 
  pivot_longer(cols = -1, names_to = "quarter", values_to = "gdp") |> 
  select(-1) |> 
  mutate(quarter = str_replace(quarter, "_q", "\\.") |> str_remove("x") |> as.numeric()) |> 
  summarise(gdp_mean = mean(gdp), .by = quarter) |> 
  mutate(gdp_growth = (gdp_mean - lag(gdp_mean))/lag(gdp_mean))

view(pr_approval)
gdp_clean |> 
  ggplot(aes(quarter, gdp_growth)) +
  geom_point() +
  geom_smooth()

pr_gdp <- pr_approval |> 
    filter(approval == "trust_yes") |> 
  left_join(gdp_clean, by = "quarter") |> 
  arrange(quarter) |> 
  summarise(share_evol = share - lag(share), .by = name,
            gdp_growth, quarter) 

pr_gdp

pr_gdp |> 
  ggplot(aes(gdp_growth, share_evol)) + 
  geom_point() +
  geom_smooth()


```

