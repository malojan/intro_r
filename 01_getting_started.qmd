---
output: html_document
editor_options: 
  chunk_output_type: console
---
```{css, echo = FALSE}
.justify {
  text-align: justify !important
}
```
::: justify

# Introduction {.unnumbered}

## Goals of the class

-   Giving you the will to continue and to apply
-   Study variations and relationship with statistics
-   Learning skills that will be really valuable on the job market (academia, industry, public administration) : many position that requires getting data, sumamrizing it and analyzing it.

This class requires no experience in programming and it is for complete beginners to accompany you to use R. Some of you might have already learnt it and you will be faster than the others, do not hesitate if you want extra.

## Evaluation

To learn R, you need to practice.

-   A small exercice : you need to practice and try : 4 small individual exercices : noted each with 5 points
-   Group project : collective note

## A motivation for this class : what is programming and why would we need it in social sciences

Before we start, I think it is necessary to give a few words about why we are doing this. Learning Rstudio means learn how to code, how to program : why should we do that as social scientists ? Why would we even bother to learn that stuff that looks complicated ? Why do not just used excel to do some calculations ? R is a programming language, programming means giving instrucgtions to a computer in order to realize some tasks. And we use a software to do this because it is easier. 


You might be thinking, "I've already learned Excel and can perform some data analysis tasks with it. Why should I bother learning to code in a seemingly complex language?", SPSS or SAS, STATA 

However, this has the disadvantage of having less comprehensive documentation compared to other languages like STATA.



To analyze quantitative data, we need a computer to help us to do some tasks such as accessing, manipulating data, vizualizing it and modelling it. To ask our computer to do it, we usaully rely on a software and there are of different kind in the market. You probably all know excel or you would have heard of STATA, SPSS or SAS. However, the trend is to use R and has becoming more and more popular.

I really want to make a case for why this class is very important.

-   Why programming and what is could be useful for :

-   Data manipulation

-   But also lot of fancier stuff that are more and more used in social sciences (web scraping, social networks analysis, maps, text analysis, image analysis, machine learning)

-   This class is just intro so we will not cover all of these but I can give you more ressources if you want to learn and at the end of this class, you should be definitely able to go in depth by yourself in some of these topics.

### Reproducibility

Reproducibility is that the same analysis can be exactly redone given the code and the data. First, your future you. Second other people. See Gelman 2016 as well. 

Reproducibility or Replicatioon ? 

Another reason why it is useful doing this is reproducibility. You might have heard of the "replication crisis" in science. During the last decades, people have tried to replicate analysis made by others and usually they did not succeed. 

This has led most journals to condition publication upon you provide code, data and that they are able to reproduce your results.  Nowadays, if you want to publish in a journal using quantitative data, almost all of them will ask your for your replication code.




[](jop_replication.png)

```{r}
#| echo: false
#| message: false

library(tidyverse)

read_csv("ajps_replication.csv") |> 
  group_by(year) |> 
  count() |> 
  ggplot(aes(year, n)) +
    geom_point()
```

This is important because, it gives more transparency of the decisions you make as a quantitative researcher. Quantitative analysis requires a lot of choices on how you choose your variables, how you recode them, you compute summary, which observations you keep and you discard. By having everything in a code that everyone can look at is a good practice. Coding helps you reflect on what you do with the data. Looking at the code of others make you more critical of their research. 


### Computational social sciences

Rise of computational social sciences 


### Valuable skills on the job market

If you think about 

Even if you want to pursue a career in an other sector, "data science" skills are also really valuable and trendy. 

```{r }
#| message: false
#| echo: false

library(tidyverse)

read_csv("ggtrend_datascience.csv", skip = 1) |> 
  janitor::clean_names() |> 
  mutate(month = ym(mois), 
         num = data_science_dans_tous_les_pays) |> 
  ggplot(aes(month, num)) + 
  geom_line() +
  theme_light() +
  scale_x_date("Date") +
  scale_y_continuous("Relative interest") +
  ggtitle("Popularity of data science (Google Trends)")
```
- More and more jobs require to analyze data, and there are more and more data due to digitalization. 

In you want to continue in academia, quantitative skills and programming are highly valuable and pre-requisite for many positions. Journals also more and more ask for replications code when you want to publish an article in order that the other could replicate your findings. In political science, R is more and more the dominant language.

### Programming as a qualitative researcher ? 

This class teaches you how to use programming to analyze data in a quantitative fashion. Programming is usually associated with quantitative research in social sciences because it is useful to analyze a large number of data. If you are a more qualitative researcher, you might be frightened by all of this, why you would learn all of that stuff and I need to convince you that it is still useful to learn for different reasons. Yet, here a few incentives for people who may qualify themselves are more qualtitative research to invest some resources in learning this. 

At the end, the beauty of programming is automation and you can also automate some tasks in qualitative research. 

1. First, Let yourself be surprised. Many people start this master having no intention at all to do quantitative analysis and eventually they do
2. Collecting data and storing data: web scraping, eg : online ethnography of a social media but you would still need to collect that data and you will quickly learn that copy and post social media post in a word file is not the way to go. 

3. Describe data, contextualize : you might have access to many documents, interviews but have some trends
4. Formatting data : programmation :
  - image to text
  - speech to text

2. Then, even if the core of your research is qualitative, you could be more convincing by adding some descriptive graphs to depict the broader universe of your topic, do some descriptive statistics to contextualize your interviews and so on., you could suprisingly discover a dataset that is super useful for you research and have tha ability yo analyze it even if at first sight you would not have do so
3. If you want to analyze reports, text qualitatively, programming can however be a useful way to automate their collection online and to efficiently store them. You could also have a inductive automated text analysis of your document before going through a careful reading of them.
4. Finally, recent advances in AI have made it possible, with just a few lines of code, to have very high quality automatic audio-to-text [transcriptions for interviews](https://www.css.cnrs.fr/whisper-pour-retranscrire-des-entretiens/). A knowledge of programming makes this type of algorithm easy to use (have a look on this tuto with python : ) 

### Why R ? 

-   It s free, open source,  built by a community of people, people adapt the language to new tools
-   Specialized in statistics

-   But high learning curve : learning R is quite difficult at the begining. And the best thing to do to learn it is to have a goal.

-   Why not Python ? Python also highly valuable skills and more popular in industry in general. Moreover, if you are interested in recent machine learning techniques and text analysis, everything that is developed is in Python. Python is more general, more flexible because less abstraction

## How Rstudio is organized

RStudio is an integrated development environment (IDE) for R. It provides a user-friendly interface for working with R, and includes features such as a code editor, a console for executing R code, a data viewer, and tools for debugging and profiling R code. RStudio also supports the creation of interactive documents and web applications using Quarto or RMarkdown, which allows users to combine code, text, and graphics into a single document.

-   Script/open files : might be a presentation, a website, a R script, a Quarto document and so on. Code windows, things we want to save and re-run later. SAVE AS script. MAC should be at the Home directory.

-   Console : where the output of your code will appear

-   Environment : all of the objects we have saved in Rstudio. lean new objects, assignments.

-   Working directory : place in our computer where R will read ans save file, usually default, but this is really important, it is where your files leave in your computer

-   What is a working directory : where is my file living on my computer

-   

## R "projects" and path

-   Path, set working directory

-   R projects

-   How your computer is organized.

-   Recommend do not save your workspace



### Basic code

First, R can be used as a calculator to perform different operations, either in a script or directly in the console. The output will be generated in the console
each time you run one line of code (CTRL + Enter)

```{r}
3*9*10
2/6
2^2
```

## Using scripts 

- Learn how to use a script to compute different things


## Vectors

In R, most of the things we manipulate are vectors, which are sequences of different values on which we can perform operations. These vectors can be of different types (eg : vectors of numbers, vectors of strings) but have to be of the same type (atomic vectors). You would also store elements of different values in lists. Vectors have a type (typof) and a length.

vector are sequences of things


We can generate vectors with c().

-   How things work in R : vectors, strings and so on

-   What is an object, what is the environment

Notice that I have write this with an underscore : no space.

vectors : sequences of things, we can create them with c(), list of values, there are unidimensionals, have only one type

We store data as objects and we assign them values on which we can perform operations later on. Objects can be one number, several strings or dataframes as we will see later.Look at what happens in the enviromnet pane now

```{r}
first_object <- c(2, 4)
second_object <- c(6, 3)
first_object + 4

first_object + second_object

third_object <- c(first_object, second_object)
third_object
```

Objects with assignment operator \<-, we give a value to an object. There are conventions on how you should write objects names : you can visit this here : https://style.tidyverse.org/syntax.html#object-names



### Characters vectors

Goal to have vectors is to do operations on them.

```{r}
pol_women <- c("Merkel", "Meloni", "May", "Le Pen", "Frederiksen", "Diaz")
pol_men <- c("Biden", "Macron", "Sanchez", "Sunak", "Schultz", "Rutte")

politicians <- c(pol_women, pol_men)
politicians

```


## Logical vectors

```{r}
c(TRUE, TRUE, TRUE, FALSE, FALSE, FALSE)
```

But logical vectors are useful to evaluate whether a condition is useful or not. For instance here, we check whether each value of the vector `pol_men` is equal to "Biden". 

```{r}
pol_men == "Biden"

3 > 5
```

### Indexation

You can access specific elements of vectors by **indexing**, which is performed by using square brackets `[]`.

```{r}

politicians[3]
politicians[-3]
politicians[c(1,5)]
politicians[1:3]
politicians[politicians == "Macron"]
politicians[politicians != "Macron"]
politicians[politicians %in% c("Macron", "Meloni")]

```

## Functions

When we want to manipulate vectors and conduct operations on them, we use functions. A function takes arguments : usually the data of a specific type and them some specifications. 

```{r}
a_vector <- c(0:100)
a_vector
mean(a_vector)

```

Operations work for a specific type however. I cannot do a sum of a vector that contains strings. Here we get warning messages

```{r error=TRUE}
sum(a_vector)
sum(pol_men) # This is an error
```


When you write code, you want to annotate your code for the others to understand or you future you. You wan use the \# and say : this is a comment. You can try to run this and you wont have anything.

### Attributes

R objects have attributes

```{r}
class("a cat")
class(1)

"a cat" |> attr("class")
```


### Packages and libraries

The functions used so far such as `sum()` and `mean()` are directly available from base R, which are all the functions that are already pre-loaded. However, many functions you will use are not directly available and come from specific packages that people have created and that you can install and load in R. For instance, package : tidyverse. To install a package, write `install.packages("tidyverse")` in the console. You will have to do this only once. However, you will need to load the package everytime you start your script. 

```{r}
library(tidyverse)
```


The tidyverse contains many packages and many functions. One of these package is
the `stringr` package that is useful to manipulate character vectors. As the stringr package is part of the tidyverse, you do not have to load it. 

```{r}
str_to_lower(politicians)
str_to_upper(politicians)
str_detect(politicians, "M")
```

We can also combine characters vectors together. 

```{r}
countries <- c("Germany", "Italy", "Great Britain", "France", "Denmark", "Spain")

str_c(pol_women, " is a politician from ", countries)
```

### Dataframes and tibbles

We usually do not work directly with vectors but with dataframes. dataframes are combinations of vectors

tibbles gives you more concise information when you print it, linked with tidyverse functions, "improved" dataframes. Tibbles only can contain vectors of the same type and the same lgenth

-   The tidyverse is easier, but I will often try to show use how to things in base R because it always could be useful.

To show you, I first manually a dataframe with the results of the last presidential election in France. 

```{r}
elec <- tibble::tibble(
  candidate = c("Macron", "Melenchon", "Pecresse", "Le Pen", "Zemmour"), 
  party = c("REN", "LFI", "LR", "RN", "REC"), 
  gender = c("M", "M", "F", "F", "M"), 
  score = c(25, 22, 4, 24, 7) 
)

elec
```

You see now that we have a new object in our Environment Pane with 3 observations and 4 variables. If we want to access only one variable (one vector) of that dataframe, we use the `$` sign. 

```{r}
elec$party
elec[[2]] # Double brackets here because not atomic vectors anymore but nested structure
```

We can also use indexing to get the value of spec

```{r}
elec$candidate[5] # Get the row 5 of the candidate variable
elec[5, 1] # get the value of the row 5, column 1
```

```{r}
head(elec, 2)
tail(elec, 2)
dplyr::glimpse(my_data)
colnames(my_data)
dim(my_data)
nrow(my_data)
summary(my_data)
```

No correct way to do stuffs in R, you can do the same things in very different ways : learning how to learn. You cannot remember anything. We do google search all the time. But you need some patience.

Install Packages

that you need to load with library.

## Importing data

### Get data

Last time we tried to get a sense of what R can do with basic arithmetics but usually we are interested in working with real data. Our goal with R is to use programming to produce analysis of quantitative data. Then the first thing you need is to get that data somewhere, either collect if through a survey, or build a dataset yourself by coding some informations about the individuals or organizations you are interested in. But there are also many many many datasets already available around there that people (administrations, researchers, ngos, companies, international organization and so on) have already created and made available. At this stage, I will give you already-made datasets on which you can work, but you should know that with R, you can collect data directly from the internet : this is called web scraping (you can learn that later on if you continue to)

So far, I showed you basic use of R with fake data. But our goal with R is to use programming to produce analysis of quantitative real data to answer social sciences research questions. Then, the first thing you need is to get data. There are a lot of data around us such as :

-   Surveys : ex : measuring people attitudes
-   Text
-   Image
-   Country characteristics, institutions
-   Datasets that other researches have produced
-   Datasets that administration, parliaments etc

You could also consider producing your own datasets through :

-   Producing your own survey (but you need money)
-   Scraping
-   Hand-coding

### Read data into R

The first thing we have to do when working with data in importing data into R. This step is crucial, make looks simple but sometimes is not and because datasets comes in very different format. The most common is .csv (for comma separated values), butin political science, you will find also a lot of stata (.dta) or spss (.sav) files. In base R, you can use the `read.csv()` function to import csv file.

To import data here, we will use the `readr` package, that is part of the `tidyverse`.

-   read_r : read_csv, read_csv2

-   Importance of paths

-   Encoding issues ?

### Write data

Once you have done something, that you want to share it or hand it to me for your assignment, you

## Literate programming

Liteeate progrmming (Knuth 1984)
I already told you about replication and eveyrhing. Rstudio allows you to combine text and code in the same documents. I will try to introduce you to these tools because there are really nice to write.

-   Script : way to write down code, you do not have to write everything again next time

When you open a quarto document, you will have to fill the top matter, called tha YAML


-   Or literate programming documents : Quarto/Rmarkdown : documents that allows you to combine text and code and then to convert them in pdf, word or html format.

Notions : script, code, programmation





-   R script : write code and \# with comments


## Packages and libraries

-   What is a package : you must use quotation marks you must use (single or double) quotation marks around the package's name:

-   Calling a package

## Getting help and dealing with errors

When learning a new language, we inevitably make mistakes. Programming can be highly frustrating because it throws numerous errors at us. Unlike when practicing a new language with foreigners, R is exceptionally strict in what it accepts. If you don't ask correctly, it won't comprehend anything. Therefore, you must discover ways to identify and understand the root causes of these errors. 

Overcome the errors is one of the most effective methods to learn R. Here a few places where you wan find the help you will need. 

### R documentation

Every function/package has a documentation written by those who created it. You can access it directly from Rstudio by adding a `?` in front of it in the console and run this line of code. This will open a description displayed on the help pane of the function, the different arguments it can take and a few examples of it use. For instance 

```{r}
?read_csv
```


### Cheatsheets

Every package of the tidyverse (and some other) have a cheatsheat with a lot of infos of the different functions available on this [link](https://posit.co/resources/cheatsheets/). See for instance the reader [cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-import.pdf). 

### Online ressources 

First, you have to understand that the error you will get, many people have got it before you and some of them have asked online. So the first thing to do is to check whether people have already asked the same kind of questions. If R gives you an error and you don't understand what it means, it's highly likely that someone has already asked the question, and you can find on the site people who have provided solutions. You will also find help googling what you are looking for. Either when you want to do something (eg : "how to import a `.dta` file in R'), or when you want to deal with an error, just google the error. Most of the time you'll come across a blog called [Stackoverflow](https://stackoverflow.com/) , which brings together a community of users of different programming languages. In general, be aware that in programming, everyone copy and paste the code of everyone. You might also visit the website or [Rstudio Commmunity](@https://community.rstudio.com/) and look at the [#rstats](https://twitter.com/search?q=%23rstats&src=hashtag_click) on twitter. 

### AI is your friend 

Finally, when you write code, [ChatGPT](https://chat.openai.com/) can quickly become one of your closest allies. By providing it with your errors or asking for instructions to accomplish specific coding tasks, it can perform exceptionally well. I highly recommend utilizing it in your coding endeavors. However, be cautious as ChatGPT may occasionally produce non-existent functions or hallucinate. It's not a miraculous solution. Nevertheless, you'll swiftly realize whether the information provided is accurate or not because if it isn't, the code won't function properly in R.

### Most common errors 

Finally, some errors are really common and you will probably face them often. I provide you here a (non exhaustive) list of those to help you troubleshooting^[I rely on many blogposts done of this, [here](https://statsandr.com/blog/top-10-errors-in-r/), [here](https://warin.ca/posts/rcourse-howto-interpretcommonerrors/), [here]( https://www.r-bloggers.com/2016/06/common-r-programming-errors-faced-by-beginners/), [here](https://epirhandbook.com/en/common-errors.html), [here](https://bookdown.org/yih_huynh/Guide-to-R-Book/trouble.html) and [here](https://blog.revolutionanalytics.com/2015/03/the-most-common-r-error-messages.html)]. 

#### Syntax errors

Most of "beginners" errors in R are syntax errors : you mis code something and so Rstudio really does not understand. It can be typos when writing function and forgetting about a `)`, `,`, `"`. For instance, you would forget a closing `"` when wanting to subset the `Meloni` string of in the politicians vector : `politicians[politicians == "Meloni]`. In that case you will probably see a `+` in the console, meaning that R is waiting for something more to compute what you want to do. 

#### The "not found" errors

- `Error: function 'x' not found` : mispelling or package not loaded

```{r error=TRUE}
Library(tidyverse)
means(c(15,16,19)) 
read_html("https://labour.org.uk/category/latest/press-release/")
```

Capitalization/Mispelling
In the first case, we want to compute the mean of a vector of different numbers. But we made a typo by adding a s to the `mean()` function, leading to an error. In the second we try to read the html code of a webpage, which is useful when we want to do web scraping. In that case, the function is correct, but we have not load the `rvest` package that provide this function before. So when you face this error, check both the spelling of the function and make sure its package is loaded (with `library(rvest)` for instance). 

- `Error: object 'x' not found` : typo, forgot to run the line or saving object

```{r error=TRUE}
politician[1]
```

You might alo want to look at only the politicians from the EU and the object eu_politicians. Here, the error happens because we did not save any object with this value yet.

```{r error=TRUE}
eu_politicians

eu_politicians <- politicians[!politicians %in% c("Biden", "Sunak")]
eu_politicians
```

`Error in install.packages : object 'x' not found`

```{r error=TRUE}
install.packages(rvest)
```

Most of the time, you just forget the `""` and you should write `install.packages("rvest")`. It might also be a typo in the package name (eg. you would have an error with `install.packag("Rvest")`.

- `Error: 'x' does not exist in current working directory`

```{r error=TRUE}
readr::read_csv("thisdata.csv")
```


#### Error in rnorm() : argument "n" is missing, with no default


-   Error: cannot open the connection
non-numeric argument to binary operator

If you have just run all of your script in once and you do not know what did not work, run your code line by line. 

#### Inconsistent data types

We have seen already that R comes with different data types such as `logical` or `character`. Many functions takes as argument a vector of a specific type and will not work on other. Below an obvious example : if we try to compute the mean of a character vector, this will not work. 

```{r error=TRUE}
politicians
class(politicians)
mean(politicians)
```


- `$ operator is invalid for atomic vectors``
- `object of type ‘closure’ is not subsettable`


## Exercise 1

1.  Create an R project on your computer in the location and with the name you want (avoid white spaces). This should create a new folder containing an Rproj file.

2.  Create a quarto document with the title "Exercise 1" and your name as author. Save the file as ("lastname_ex1.qmd") and save it in the same folder.

3.  Add a chunk code and print out your working directory to make sure your R session is launched in the project you've created. The last part of the path displayed should correspond to the project name.

4.  Add a new chunk code and find a way to import the Quality of Government environmental indicators dataset into Rstudio, either in `.dta` format (stata) or `.sav` format (spss).

5.  Once the data has been imported, answer the following questions with both code and writing on the quarto document:

-   What is this dataset about ?
-   What is the unit of analysis for this dataset ?
-   Find a way to calculate the mean of the variable wdi_fossil and write a sentence to interpret the result.

6.  Render the quarto document in a pdf format and upload your file on moodle. To compile in pdf, you might need to install the `tinytext` package and it might actually do not work. If it does not just compile into html and send it like this. 

## Solution to exercise 1

3.  Print your working directory

First, you had to print your working directory. To do this in quarto, you have to add a new cunk code, which you can do by option + command + i in MAC or ... in Windocs. You can also click on code and 'Insert Chunk' in the functions bar.

```{r}
getwd() 
here::here() 
```

The `haven` package allows you to read both files from Stata or from SPSS with either `read_dta()` or `read_sav()`. Here I've copied the address of the pdf link on the site and read the file directly from the Internet. I could also have downloaded the file and saved it in the same folder as my project to import it, specifying the file name as the first argument to the `read_dta` function.

```{r}
qog <- haven::read_dta("https://www.qogdata.pol.gu.se/data/qog_ei_sept21.dta")
```

```{r}
qog |> head(10) # Look at the first 10 rows
qog |> tail(5) # Look at the last 5 rows
dplyr::glimpse(qog)
```

Or we can have a look at the codebook which we can download with the data that gives us a description of every variable in the dataset.

```{r}
summary(qog$wdi_fossil)
mean(qog$wdi_fossil)
mean(qog$wdi_fossil, na.rm = TRUE)
```

### Additional ressources



:::
